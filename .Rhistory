rect(par("usr")[1], par("usr")[3], par("usr")[2], par("usr")[4], col = "grey")
points(east(interT),north(interT),pch=16,cex=0.6,col=getCol(upFrac))
# Draw legend
image(1, upLevels,matrix(data=upLevels, ncol=length(upLevels),nrow=1),col=cp,xlab="",ylab="Elevation (m)",xaxt="n")
layout(1)
# Heart rate trace
layout(matrix(data=c(1,2), nrow=1, ncol=2), widths=c(4,1), heights=c(1,1))
plot(NULL,xlab="East (m)",ylab="North (m)",xlim=c(min(df$East),max(df$East)),ylim=c(min(df$North),max(df$North)),main=paste(title,date))
rect(par("usr")[1], par("usr")[3], par("usr")[2], par("usr")[4], col = "grey")
points(east(interT),north(interT),pch=16,cex=0.6,col=getCol(hrFrac))
# Draw legend
image(1, hrLevels,matrix(data=hrLevels, ncol=length(hrLevels),nrow=1),col=cp,xlab="",ylab="Heart Rate (bpm)",xaxt="n")
layout(1)
# Pace trace
layout(matrix(data=c(1,2), nrow=1, ncol=2), widths=c(4,1), heights=c(1,1))
plot(NULL,xlab="East (m)",ylab="North (m)",xlim=c(min(df$East),max(df$East)),ylim=c(min(df$North),max(df$North)),main=paste(title,date))
rect(par("usr")[1], par("usr")[3], par("usr")[2], par("usr")[4], col = "grey")
points(east(interT),north(interT),pch=16,cex=0.6,col=getCol(pFrac))
# Draw legend
image(1, pLevels,matrix(data=pLevels, ncol=length(pLevels),nrow=1),col=cp,xlab="",ylab="Pace (min/km)",xaxt="n")
layout(1)
#####
op<-par(mfrow=c(2,2))
# Elevation timecourse
plot(df$Seconds/60,df$Elevation,xlab="Time (min)",ylab="Elevation (m)",type="l",lwd=2,col="red")
# Heart rate timecourse
plot(df$Seconds/60,df$HeartRate,xlab="Time (min)",ylab="Heart Rate (bpm)",type="l",lwd=2,col="red")
# Distance timecourse
#plot(df$Seconds/60,df$Dist/1000,xlab="Time (min)",ylab="Distance (km)",type="l",lwd=2,col="red")
# Speed timecourse
plot(df$Seconds/60,60*df$Speed/1000,xlab="Time (min)",ylab="Speed (km/min)",type="l",lwd=2,col="red")
# Pace timecourse
pmin=max(0,1000*min(df$Pace)/60)
pmax=min(7,1000*max(df$Pace)/60)
plot(df$Seconds/60,1000*df$Pace/60,xlab="Time (min)",ylab="Pace (min/km)",type="l",lwd=2,col="red",ylim=c(pmin,pmax))
title("Performance statistics with time (min)",line=-2,outer=TRUE)
par(op)
#####
op<-par(mfrow=c(2,2))
# Elevation timecourse
plot(df$Dist/1000,df$Elevation,xlab="Distance (km)",ylab="Elevation (m)",type="l",lwd=3,col="blue")
# Heart rate timecourse
plot(df$Dist/1000,df$HeartRate,xlab="Distance (km)",ylab="Heart Rate (bpm)",type="l",lwd=2,col="blue")
# Distance timecourse
#plot(df$Dist/1000,df$Dist/1000,xlab="Distance (km)",ylab="Distance (km)",type="l",lwd=2,col="blue")
# Speed timecourse
plot(df$Dist/1000,60*df$Speed/1000,xlab="Distance (km)",ylab="Speed (km/min)",type="l",lwd=2,col="blue")
# Pace timecourse
pmin=max(0,1000*min(df$Pace)/60)
pmax=min(7,1000*max(df$Pace)/60)
plot(df$Dist/1000,1000*df$Pace/60,xlab="Distance (km)",ylab="Pace (min/km)",type="l",lwd=2,col="blue",ylim=c(pmin,pmax))
title("Performance statistics with distance (km)",line=-2,outer=TRUE)
par(op)
#####
op<-par(mfrow=c(1,2))
hist(1000*plt$pace/60,breaks=21,xlab="Pace (min/km)",ylab="Frequency",main="")
hist(plt$hr,breaks=61,xlab="Heart Rate (bpm)",ylab="Frequency",main="")
title("Frequency histograms",line=-2,outer=TRUE)
par(op)
#####
op<-par(mfrow=c(2,2))
# Pace gradient correlation
gpCor=formatC(cor(df$Gradient,1000*df$Pace/60), digits=4)
plot(df$Gradient,1000*df$Pace/60,col="red",pch=16,xlab="Gradient",ylab="Pace (min/km)",main=paste("Correlation:",gpCor))
# Heart-rate gradient correlation
# need to strip out warming up period
minHR=mean(df$HeartRate)-1.98*sd(df$HeartRate)
times=df$Seconds[df$HeartRate>=minHR]
mint=min(times)
dfHR=df[df$Seconds>mint,]
gpCor=formatC(cor(dfHR$Gradient,dfHR$HeartRate), digits=4)
plot(dfHR$Gradient,dfHR$HeartRate,col="red",pch=16,xlab="Gradient",ylab="Heart Rate (bpm)",main=paste("Correlation:",gpCor))
# Pace time correlation
gpCor=formatC(cor(df$Seconds,1000*df$Pace/60), digits=4)
plot(df$Seconds,1000*df$Pace/60,col="red",pch=16,xlab="Time (s)",ylab="Pace (min/km)",main=paste("Correlation:",gpCor),
ylim=c(1000*min(df$Pace)/60,min(c(7,1000*max(df$Pace)/60))))
# Heart-rate time correlation
gpCor=formatC(cor(dfHR$Seconds,dfHR$HeartRate), digits=4)
plot(dfHR$Seconds,dfHR$HeartRate,col="red",pch=16,xlab="Time (s)",ylab="Heart Rate (bpm)",main=paste("Correlation:",gpCor))
par(op)
dev.off()
library(XML)
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
install.packages("ggplot2")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("plyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
install.packages("plyr")
library("plyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library(XML)
getwd()
ls(all.names=T)
rm(list=ls(all.names=T))
source("readGPX.R")
ls(all.names=T)
gpx_file <- readGPX("GPX_test_files/test_file.gpx")
str(gpx_file)
data2 <- gpx_file$tracks[[1]][[1]]
head(data2)
str(data2)
str(data2)
head(data2)
df <- data.frame(data2$ele,data2$time,0,data2$lon,data2$lat,stringsAsFactors = F)
colnames(df)=c("Elevation","DateTime","HeartRate","Longitude","Latitude")
df$Elevation <- as.numeric(df$Elevation)
str(df)
head(df)
str(df)
head(df)
str(df)
gpx_file <- readGPX("GPX_test_files/test_file.gpx")
str(gpx_file)
data2 <- gpx_file$tracks[[1]][[1]]
head(data2)
str(data2)
library(XML)
filename="GPX_test_files/test_file_5_Garmin"
doc=xmlParse(paste(filename,".gpx",sep=""),useInternalNodes=TRUE)
doc
top=xmlRoot(doc)
top
title=toString.XMLNode(top[[2]][[1]][[1]])
title
description=toString.XMLNode(top[[2]][[2]][[1]])
description
data=toString.XMLNode(top[[2]][[3]])
data
top[[2]][[2]][[1]]
description
if(data=="NULL") data=toString.XMLNode(top[[2]][[2]])
if(data=="NULL") data=toString.XMLNode(top[[2]][[1]])
df=as.data.frame(xmlToDataFrame(data,c("numeric", "character", "integer")))
df
if(toString.XMLNode(top[[2]][[3]])=="NULL") {
if(toString.XMLNode(top[[2]][[2]])=="NULL") {
attribs=xmlSApply(top[[2]][[1]],xmlAttrs)
}else{
attribs=xmlSApply(top[[2]][[2]],xmlAttrs)
}
}else{
attribs=xmlSApply(top[[2]][[3]],xmlAttrs)
}
df$lon=as.numeric(attribs[1,])
df$lat=as.numeric(attribs[2,])
df
colnames(df)=c("Elevation","DateTime","HeartRate","Longitude","Latitude")
df$Elevation=as.numeric(df$Elevation)
df$HeartRate=as.integer(df$HeartRate)
df$DateTime=as.character(df$DateTime)
str(df)
str(df)
df <- data.frame(data2$ele,data2$time,0,data2$lon,data2$lat,stringsAsFactors = F)
str(df)
df$Elevation <- as.numeric(df$Elevation)
str(df)
doc=xmlParse(paste(filename,".gpx",sep=""),useInternalNodes=TRUE)
# We need to extract the simple tree structure containing
# the data which we can pass to xmlToDataFrame
top=xmlRoot(doc)
title=toString.XMLNode(top[[2]][[1]][[1]]) ##R# <Trk><name>
description=toString.XMLNode(top[[2]][[2]][[1]]) ##R# <Trk><desc>
data=toString.XMLNode(top[[2]][[3]]) ##R# <Trk><trkseg>
# All these tests in case description node is empty!
# When it is, data node is moved up one
# Really need to access nodes by name, but can't see how...
if(data=="NULL") data=toString.XMLNode(top[[2]][[2]])
if(data=="NULL") data=toString.XMLNode(top[[2]][[1]])
# Fill a data frame with interesting data
df=as.data.frame(xmlToDataFrame(data,c("numeric", "character", "integer")))
if(toString.XMLNode(top[[2]][[3]])=="NULL") {
if(toString.XMLNode(top[[2]][[2]])=="NULL") {
attribs=xmlSApply(top[[2]][[1]],xmlAttrs)
}else{
attribs=xmlSApply(top[[2]][[2]],xmlAttrs)
}
}else{
attribs=xmlSApply(top[[2]][[3]],xmlAttrs)
}
df$lon=as.numeric(attribs[1,])
df$lat=as.numeric(attribs[2,])
##R# Here the df is finished
colnames(df)=c("Elevation","DateTime","HeartRate","Longitude","Latitude")
df$Elevation=as.numeric(df$Elevation)
df$HeartRate=as.integer(df$HeartRate)
df$DateTime=as.character(df$DateTime)
##R# look at the structure of the columns
##R# Elevation (num) DateTime (chr) HeartRate (int) Longitude (num) Latitude (num)
str(df)
df <- data.frame(data2$ele,data2$time,0,data2$lon,data2$lat,stringsAsFactors = F)
colnames(df)=c("Elevation","DateTime","HeartRate","Longitude","Latitude")
df$Elevation <- as.numeric(df$Elevation)
str(df)
date=substr(df$DateTime[1],1,10)
date
DateTime[1]
df$DateTime[1]
filename="GPX_test_files/test_file_5_Garmin"
doc=xmlParse(paste(filename,".gpx",sep=""),useInternalNodes=TRUE)
# We need to extract the simple tree structure containing
# the data which we can pass to xmlToDataFrame
top=xmlRoot(doc)
title=toString.XMLNode(top[[2]][[1]][[1]]) ##R# <Trk><name>
description=toString.XMLNode(top[[2]][[2]][[1]]) ##R# <Trk><desc>
data=toString.XMLNode(top[[2]][[3]]) ##R# <Trk><trkseg>
# All these tests in case description node is empty!
# When it is, data node is moved up one
# Really need to access nodes by name, but can't see how...
if(data=="NULL") data=toString.XMLNode(top[[2]][[2]])
if(data=="NULL") data=toString.XMLNode(top[[2]][[1]])
# Fill a data frame with interesting data
df=as.data.frame(xmlToDataFrame(data,c("numeric", "character", "integer")))
if(toString.XMLNode(top[[2]][[3]])=="NULL") {
if(toString.XMLNode(top[[2]][[2]])=="NULL") {
attribs=xmlSApply(top[[2]][[1]],xmlAttrs)
}else{
attribs=xmlSApply(top[[2]][[2]],xmlAttrs)
}
}else{
attribs=xmlSApply(top[[2]][[3]],xmlAttrs)
}
df$lon=as.numeric(attribs[1,])
df$lat=as.numeric(attribs[2,])
##R# Here the df is finished
colnames(df)=c("Elevation","DateTime","HeartRate","Longitude","Latitude")
df$Elevation=as.numeric(df$Elevation)
df$HeartRate=as.integer(df$HeartRate)
df$DateTime=as.character(df$DateTime)
##R# look at the structure of the columns
##R# Elevation (num) DateTime (chr) HeartRate (int) Longitude (num) Latitude (num)
str(df)
date=substr(df$DateTime[1],1,10) ##R# Obtains the date of the file
date
Time=substr(df$DateTime,12,19)
df$DateTime
Time=substr(df$DateTime,12,19) ##R# Obtains the times of the file,  char 12-19
head(Time)
head(df$DateTime)
head(df$Time)
head(Time)
T0=strptime(Time[1],"%H:%M:%S")
T0
Time[1]
T0=strptime(Time[1],"%H:%M:%S") ## Starting time
T0
Time=as.numeric(strptime(Time,"%H:%M:%S")-T0)
Time
head(time)
head(Time)
head(df$DateTime)
head(Time)
Time=substr(df$DateTime,12,19) ##R# Obtains the times of the file,  char 12-19
head(df$DateTime)
head(Time)
T0=strptime(Time[1],"%H:%M:%S") ## Starting time
Time=as.numeric(strptime(Time,"%H:%M:%S")-T0)
head(Time)
df$Seconds=Time
head(df$Seconds)
df$dNorth=0; df$dEast=0; df$dUp=0;
df$North=0; df$East=0; df$dDist=0;
df$dDist2D=0; df$Dist2D=0
head(df)
write.csv(df,file="GPX_to_CSV.csv")
gcd.hf <- function(long1, lat1, long2, lat2) {
deg2rad <- function(deg) return(deg*pi/180)
long1 <- deg2rad(long1)
lat1 <- deg2rad(lat1)
long2 <- deg2rad(long2)
lat2 <- deg2rad(lat2)
R <- 6371 # Earth mean radius [km]
delta.long <- (long2 - long1)
delta.lat <- (lat2 - lat1)
a <- sin(delta.lat/2)^2 + cos(lat1) * cos(lat2) * sin(delta.long/2)^2
c <- 2 * asin(min(1,sqrt(a)))
d = R * c
return(d) # Distance in km
}
gcd.hf(-8.75218925066292, 53.3013500645757, -8.75214423984289, 53.3013293612748)
gcd.hf <- function(long1, lat1, long2, lat2) {
deg2rad <- function(deg) return(deg*pi/180)
long1 <- deg2rad(long1)
lat1 <- deg2rad(lat1)
long2 <- deg2rad(long2)
lat2 <- deg2rad(lat2)
R <- 6371000 # Earth mean radius [m]
delta.long <- (long2 - long1)
delta.lat <- (lat2 - lat1)
a <- sin(delta.lat/2)^2 + cos(lat1) * cos(lat2) * sin(delta.long/2)^2
c <- 2 * asin(min(1,sqrt(a)))
d = R * c
return(d) # Distance in km
}
gcd.hf(-8.75218925066292, 53.3013500645757, -8.75214423984289, 53.3013293612748)
EarthRad=6371000
haverDist<-function(aLong,aLat,bLong,bLat){
dLat=2*pi*(bLat-aLat)/360.0; dLon=2*pi*(bLong-aLong)/360.0
a=(sin(dLat/2))^2+cos(2*pi*aLat/360)*cos(2*pi*bLat/360)*(sin(dLon/2)^2)
return(EarthRad*2*atan2(sqrt(a),sqrt(1-a)))
}
rm(EarthRad)
haverDist<-function(aLong,aLat,bLong,bLat){
EarthRad=6371000
dLat=2*pi*(bLat-aLat)/360.0; dLon=2*pi*(bLong-aLong)/360.0
a=(sin(dLat/2))^2+cos(2*pi*aLat/360)*cos(2*pi*bLat/360)*(sin(dLon/2)^2)
return(EarthRad*2*atan2(sqrt(a),sqrt(1-a)))
}
gcd.hf(-8.75218925066292, 53.3013500645757, -8.75214423984289, 53.3013293612748)
haverDist(-8.75218925066292, 53.3013500645757, -8.75214423984289, 53.3013293612748)
deg2rad <- function(deg) return(deg*pi/180)
deg2rad(c(-8.75218925066292, 53.3013500645757, -8.75214423984289, 53.3013293612748))
df[1,"Longitude"]
head(Time)
head(df)
df[1,"Latitude"]
g2 <- gvisMap(data2,"loc",options=list(showLine=TRUE))
library(googleVis )
g <- gvisGeoChart(data2,"loc",options=list(region="MX"))
plot(g)
g2 <- gvisMap(data2,"loc",options=list(showLine=TRUE))
head(data2)
data2$loc=paste(data2$lat,data2$lon,sep=":")
g2 <- gvisMap(data2,"loc",options=list(showLine=TRUE))
plot(g2)
head(data2)
head(df)
df2 <- c()
df2=paste(df$Latitude,df$Longitude,sep=":")
head(df)
head(df2)
df2 <- data.frame()
df2$loc=paste(df$Latitude,df$Longitude,sep=":")
df2
df2 <- data.frame()
df2
df2 <- data.frame(loc=numeric())
df$Longitude
length(df$Longitude)
df2 <- data.frame(loc=numeric(length(df$Longitude)))
df2
df2$loc=paste(df$Latitude,df$Longitude,sep=":")
df2
g2 <- gvisMap(df,"loc",options=list(showLine=TRUE))
plot(g2)
g2 <- gvisMap(df2,"loc",options=list(showLine=TRUE))
head(df2)
df2 <- data.frame(loc=numeric(length(df$Longitude)),factor=numeric(length(df$Longitude)))
head(df2)
df2$loc=paste(df$Latitude,df$Longitude,sep=":")
g2 <- gvisMap(df2,"loc",options=list(showLine=TRUE))
plot(g2)
df2$loc=paste(df$Latitude[1:2],df$Longitude[1:2],sep=":")
df$Latitude[1:2]
df2 <- data.frame(loc=numeric(2),factor=numeric(2))
df2$loc=paste(df$Latitude[1:2],df$Longitude[1:2],sep=":")
df2
g2 <- gvisMap(df2,"loc",options=list(showLine=TRUE))
plot(g2)
g2 <- gvisMap(df2,"loc",
options=list(showLine=TRUE,gvis.editor="Editar"))
plot(g2)
g2 <- gvisMap(df2,"loc",
options=list(showLine=TRUE,showtip=T))
plot(g2)
g2 <- gvisMap(df2,"loc",
options=list(showLine=TRUE,showTip=T))
plot(g2)
g2 <- gvisMap(df2,"loc",
options=list(showLine=TRUE,showTip=T))
plot(g2)
g2 <- gvisMap(df2,"loc",
options=list(showLine=TRUE,useMapTypeControl=T))
plot(g2)
head(df)
library(googleVis)
head(df2)
df2 <- data.frame(loc=numeric(2),factor=numeric(2))
df2$loc=paste(df$Latitude[1:2],df$Longitude[1:2],sep=":")
g2 <- gvisMap(df2,"loc",
options=list(showLine=TRUE,useMapTypeControl=T))
plot(g2)
head(df)
df[1,"Longitude"]
df[1,"Latitude"]
df[1,"Latitude"]
df$East=haverDist(df[1,"Longitude"],df[1,"Latitude"],df$Longitude,df[1,"Latitude"])*sign(df$Longitude-df[1,"Longitude"])
df$North=haverDist(df[1,"Longitude"],df[1,"Latitude"],df[1,"Longitude"],df$Latitude)*sign(df$Latitude-df[1,"Latitude"])
head(df)
gcd.hf <- function(long1, lat1, long2, lat2) {
deg2rad <- function(deg) return(deg*pi/180)
long1 <- deg2rad(long1)
lat1 <- deg2rad(lat1)
long2 <- deg2rad(long2)
lat2 <- deg2rad(lat2)
R <- 6371000 # Earth mean radius [##R# in m]
delta.long <- (long2 - long1)
delta.lat <- (lat2 - lat1)
a <- sin(delta.lat/2)^2 + cos(lat1) * cos(lat2) * sin(delta.long/2)^2
c <- 2 * asin(min(1,sqrt(a)))
d = R * c
return(d) # Distance in km
}
head(df)
gcd.hf(long1=-8.752189250662923, lat1=53.30135006457567,
long2=-8.752144239842892, lat2=53.30132936127484)
gcd.hf(long1=-8.752189250662923, lat1=53.30135006457567,
long2=-8.752144239842892, lat2=53.30135006457567)
gcd.hf(long1=-8.752189250662923, lat1=53.30135006457567,
long2=-8.752189250662923, lat2=53.30132936127484)
gcd.hf(long1=-8.752189250662923, lat1=53.30135006457567,
long2=-8.75197065062821, lat2=53.30135006457567)
tail(df)
gcd.hf(long1=-8.752189250662923, lat1=53.30135006457567,
long2=-8.748593162745237, lat2=53.30135006457567)
gcd.hf(long1=-8.752189250662923, lat1=53.30135006457567,
long2=-8.752189250662923, lat2=53.30189723521471)
gcd.hf(long1=-8.752189250662923, lat1=53.30135006457567,
long2=-8.752189250662923, lat2=53.30132936127484)
head(df)
length(df$DateTime)
for (x in 2:(length(df$DateTime)-1)) {
sEast=sign(df[x,"Longitude"]-df[1,"Longitude"])
sNorth=sign(df[x,"Latitude"]-df[1,"Latitude"])
df$dEast[x]=sEast*haverDist(df[x-1,"Longitude"],df[1,"Latitude"],df[x,"Longitude"],df[1,"Latitude"]) ##R# Compute change in Easting
df$dNorth[x]=sNorth*haverDist(df[1,"Longitude"],df[x-1,"Latitude"],df[1,"Longitude"],df[x,"Latitude"]) ##R# Compute change in Easting
df$dUp[x]=df$Elevation[x]-df$Elevation[x-1]
# 2D distance (ignoring hills)
df$dDist2D[x]=haverDist(df[x-1,"Longitude"],df[x-1,"Latitude"],df[x,"Longitude"],df[x,"Latitude"])
}
head(df)
gcd.hf(long1=--8.75197065062821, lat1=53.30123363994062,
long2=-8.75183586962521, lat2=53.3011516649276)
gcd.hf(long1=-8.75197065062821, lat1=53.30123363994062,
long2=-8.75183586962521, lat2=53.3011516649276)
a <- gcd.hf(long1=-8.75197065062821, lat1=53.30123363994062,
long2=-8.75183586962521, lat2=53.3011516649276)
sprintf("%.12f",a)
head(df)
df$dDist=sqrt(df$dNorth^2+df$dEast^2+df$dUp^2)
head(df)
df$Dist=cumsum(df$dDist)
head(df)
df$Dist2D=cumsum(df$dDist2D)
head(df)
options(digits=8)
head(df)
options(digits=12)
head(df)
tail(df)
tail(df)
head(df)
ptions(digits=4)
options(digits=4)
head(df)
head(df2)
library(googleVis)
head(df2)
df2 <- data.frame(loc=numeric(6),factor=numeric(6))
head(df2)
df2$loc=paste(df$Latitude[1:6],df$Longitude[1:6],sep=":")
head(df2)
g2 <- gvisMap(df2,"loc",
options=list(showLine=TRUE,useMapTypeControl=T))
plot(g2)
df2 <- data.frame(loc=numeric(20),factor=numeric(20))
df2$loc=paste(df$Latitude[1:20],df$Longitude[1:20],sep=":")
g2 <- gvisMap(df2,"loc",
options=list(showLine=TRUE,useMapTypeControl=T))
plot(g2)
df2 <- data.frame(loc=numeric(6),factor=numeric(6))
df2$loc=paste(df$Latitude[1:6],df$Longitude[1:6],sep=":")
g2 <- gvisMap(df2,"loc",
options=list(showLine=TRUE,useMapTypeControl=T))
plot(g2)
head(df)
head(df)
east=splinefun(df$Seconds,df$East)
head(east)
east
plot(east(1000))
plot(east(1:1000))
op <- par(mfrow = c(2,1), mgp = c(2,.8,0), mar = .1+c(3,3,3,1))
op
n <- 9
x <- 1:n
y <- rnorm(n)
plot(x, y, main = paste("spline[fun](.) through", n, "points"))
lines(spline(x, y))
lines(spline(x, y, n = 201), col = 2)
y <- (x-6)^2
plot(x, y, main = "spline(.) -- 3 methods")
lines(spline(x, y, n = 201), col = 2)
lines(spline(x, y, n = 201, method = "natural"), col = 3)
lines(spline(x, y, n = 201, method = "periodic"), col = 4)
legend(6,25, c("fmm","natural","periodic"), col=2:4, lty=1)
f <- splinefun(x, y)
ls(envir = environment(f))
splinecoef <- eval(expression(z), envir = environment(f))
curve(f(x), 1, 10, col = "green", lwd = 1.5)
points(splinecoef, col = "purple", cex = 2)
par(op)
f <- splinefun(x, y)
ls(envir = environment(f))
splinecoef <- eval(expression(z), envir = environment(f))
curve(f(x), 1, 10, col = "green", lwd = 1.5)
points(splinecoef, col = "purple", cex = 2)
par(op)
ls()
ls(envir = environment(f))
ls()
plot(east(1:1000))
head(df)
plot(df$Dist,df$Seconds)
