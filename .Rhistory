onlineHexColor(getCol(1))
onlineHexColor(getCol(.5))
onlineHexColor(getCol(0.01))
fix(hr)
head(interT)
min(hr(interT))
head(df)
hrFrac=(hr(interT)-min(hr(interT)))/(max(hr(interT))-min(hr(interT)))
upFrac=(up(interT)-min(up(interT)))/(max(up(interT))-min(up(interT)))
pmax=min(c(60*7/1000,max(pace(interT)))) # Else scales ruined by stopping and walking
pFrac=(pace(interT)-min(pace(interT)))/(pmax-min(pace(interT)))
head(df)
max(pace(interT))
mean(pace(interT))
hist(pace(interT))
hist(pace(interT),breaks=10)
hist(pace(interT),breaks=15)
hist(pace(interT),breaks=30)
hist(pace(interT),breaks=50)
hist(pace(interT),breaks=60)
hist(pace(interT),breaks=30)
#### http://lwlss.net/GarminReports/GarminFunctions.R
#### Comments have been meade to ease the understanding of the script
# Read in xml files from Garmin ForeRunner
library(XML)
filename="GPX_test_files/test_file_5_Garmin"
doc=xmlParse(paste(filename,".gpx",sep=""),useInternalNodes=TRUE)
# We need to extract the simple tree structure containing
# the data which we can pass to xmlToDataFrame
top=xmlRoot(doc)
title=toString.XMLNode(top[[2]][[1]][[1]]) ##R# <Trk><name>
description=toString.XMLNode(top[[2]][[2]][[1]]) ##R# <Trk><desc>
data=toString.XMLNode(top[[2]][[3]]) ##R# <Trk><trkseg>
# All these tests in case description node is empty!
# When it is, data node is moved up one
# Really need to access nodes by name, but can't see how...
if(data=="NULL") data=toString.XMLNode(top[[2]][[2]])
if(data=="NULL") data=toString.XMLNode(top[[2]][[1]])
# Fill a data frame with interesting data
df=as.data.frame(xmlToDataFrame(data,c("numeric", "character", "integer")))
if(toString.XMLNode(top[[2]][[3]])=="NULL") {
if(toString.XMLNode(top[[2]][[2]])=="NULL") {
attribs=xmlSApply(top[[2]][[1]],xmlAttrs)
}else{
attribs=xmlSApply(top[[2]][[2]],xmlAttrs)
}
}else{
attribs=xmlSApply(top[[2]][[3]],xmlAttrs)
}
df$lon=as.numeric(attribs[1,])
df$lat=as.numeric(attribs[2,])
##R# Here the df is finished
colnames(df)=c("Elevation","DateTime","HeartRate","Longitude","Latitude")
df$Elevation=as.numeric(df$Elevation)
df$HeartRate=as.integer(df$HeartRate)
df$DateTime=as.character(df$DateTime)
##R# look at the structure of the columns
##R# Elevation (num) DateTime (chr) HeartRate (int) Longitude (num) Latitude (num)
# Convert timestamp to number of seconds since start of run
date=substr(df$DateTime[1],1,10) ##R# Obtains the date of the file, first 10 char
Time=substr(df$DateTime,12,19) ##R# Obtains the times of the file,  char 12-19
#head(df$DateTime)
#head(Time)
T0=strptime(Time[1],"%H:%M:%S") ## Starting time
Time=as.numeric(strptime(Time,"%H:%M:%S")-T0) ## Elapsed time
#head(Time)
df$Seconds=Time
#head(df$Seconds)
# Initialise columns
df$dNorth=0; df$dEast=0; df$dUp=0;
df$North=0; df$East=0; df$dDist=0;
df$dDist2D=0; df$Dist2D=0
#head(df)
#write.csv(df,file="GPX_to_CSV.csv")
# Haversine formula is appropriate for calculating distances from lat/long
EarthRad=6371000 ##R# [in meters]
haverDist<-function(aLong,aLat,bLong,bLat){
dLat=2*pi*(bLat-aLat)/360.0; dLon=2*pi*(bLong-aLong)/360.0
a=(sin(dLat/2))^2+cos(2*pi*aLat/360)*cos(2*pi*bLat/360)*(sin(dLon/2)^2)
return(EarthRad*2*atan2(sqrt(a),sqrt(1-a)))
}
# Calculate northings and eastings from location 0 to east and north coordinates
df$East=haverDist(df[1,"Longitude"],df[1,"Latitude"],df$Longitude,df[1,"Latitude"])*
sign(df$Longitude-df[1,"Longitude"])
df$North=haverDist(df[1,"Longitude"],df[1,"Latitude"],df[1,"Longitude"],df$Latitude)*
sign(df$Latitude-df[1,"Latitude"])
##R# pruebas de datos
##R# library(googleVis)
##R# head(df2)
##R# df2 <- data.frame(loc=numeric(6),factor=numeric(6))
##R# df2$loc=paste(df$Latitude[1:6],df$Longitude[1:6],sep=":")
##R# g2 <- gvisMap(df2,"loc",
##R#               options=list(showLine=TRUE,useMapTypeControl=T))
##R# plot(g2)
# Calculate changes in position for each dt
for (x in 2:(length(df$DateTime)-1)) {
sEast=sign(df[x,"Longitude"]-df[1,"Longitude"])
sNorth=sign(df[x,"Latitude"]-df[1,"Latitude"])
df$dEast[x]=sEast*haverDist(df[x-1,"Longitude"],df[1,"Latitude"],df[x,"Longitude"],df[1,"Latitude"]) ##R# Compute change in Eastings
df$dNorth[x]=sNorth*haverDist(df[1,"Longitude"],df[x-1,"Latitude"],df[1,"Longitude"],df[x,"Latitude"]) ##R# Compute change inNortings
df$dUp[x]=df$Elevation[x]-df$Elevation[x-1]
# 2D distance (ignoring hills)
df$dDist2D[x]=haverDist(df[x-1,"Longitude"],df[x-1,"Latitude"],df[x,"Longitude"],df[x,"Latitude"])
}
##R# head(df)
df$dDist=sqrt(df$dNorth^2+df$dEast^2+df$dUp^2)
df$Dist=cumsum(df$dDist)
df$Dist2D=cumsum(df$dDist2D)
##R# options(digits=4)
# Fit a spline function to the GPS coordinates & elevation
east=splinefun(df$Seconds,df$East)
north=splinefun(df$Seconds,df$North)
up=splinefun(df$Seconds,df$Elevation)
dist=splinefun(df$Seconds,df$Dist)
hr=approxfun(df$Seconds,df$HeartRate) # Some gaps in heart rate record, linear interpolation more robust
# Do finite centred differencing to give smoothest rate(speed)/gradient estimates
##R# This is, to get the (Dist,Seconds) x+1 value minus the x-1 value to get the x (speed)
df$Speed=rep(0,length(df$Seconds))
df$Gradient=rep(0,length(df$Seconds))
for(x in 2:(length(df$Seconds)-1)){
Dt=df[x+1,"Seconds"]-df[x-1,"Seconds"]
Dd=df[x+1,"Dist"]-df[x-1,"Dist"]
df[x,"Speed"]=Dd/Dt # m/s
df[x,"Gradient"]=(df[x+1,"Elevation"]-df[x-1,"Elevation"])/Dd # m/m
}
##R# Complete values that werent taken into consideration with the finite centered dif.
##R# Testing speed plot(df$Seconds[1:40],df$Speed[1:40],type="o")
##R# head(df)
##R# require(ggplot2)
##R# ggplot(df,aes(x=Longitude,y=Latitude))+
##R# geom_path(aes(colour=Speed,size="50"))
##R# This plot can test the smoothing of the curve
##R# ggplot(df,aes(x=Dist))+
##R# geom_path(aes(y=Speed1,size="2"))+
##R# geom_path(aes(y=Speed2,color="red",,size="2"))
##R# This plot graphs the elevation against the distance
##R# ggplot(df,aes(x=Dist))+
##R# geom_path(aes(y=Elevation,size="2"))
df[1,"Speed"]=df[2,"Speed"]
df[length(df$Seconds),"Speed"]=df[length(df$Seconds)-1,"Speed"]
df[1,"Gradient"]=df[2,"Gradient"]
df[length(df$Seconds),"Gradient"]=df[length(df$Seconds)-1,"Gradient"]
##R# head(df)
##R# Record non-smooth speed
df$Speed1 <- df$Speed
##R# head(df$Speed1)
##R# Use only after smoothing speed
# Smooth speed as it is unrealistically noisy
df$Speed=smooth(df$Speed)
##R# Record smoothed speed
df$Speed2 <- as.numeric(df$Speed)
##R# tail(df)
##R# df[50:60,]
##R#head(df)
# Fit a spline function to rate (##R# speed)
speed=splinefun(df$Seconds,df$Speed)
pace<-function(t) sapply(1/speed(t),max,0)
ppace<-function(t) 1000*pace(t)/60
##R# Testing the spline function and comparing its smoothness
##R# speed(0)
##R# tail(df)
##R# speed(2720)
##R# pace(2720)
##R# 1/speed(2720)
##R# pace(c(2720,2716,2711))
##R# Test different speed columns
##R# x <- 1:2720
##R# par(mfrow=c(2,1),bty="l",lab=c(10,10,0.5))
##R# plot(x,speed(x),type="l",xlim=c(0,2700),ylim=c(3,6))
##R# head(df)
##R# plot(df$Seconds,df$Speed2,type="l",xlim=c(0,2700),ylim=c(3,6))
##R# dev.off()
##R# Reset par in graphics
##R# resetPar <- function() {
##R# dev.new()
##R# op <- par(no.readonly = TRUE)
##R# dev.off()
##R# op
##R# }
##R# resetPar()
# Update dataframe with speed and pace (after spline function)
df$Speed=speed(df$Seconds)
df$Pace=pace(df$Seconds)
##R# This plot can test the smoothing of the curve and the spline (notice that it
##R# does aparently nothing)
##R# head(df)
##R# str(df)
##R# png("speed_time.png",height=1000,width=4000,pointsize=1,res=300)
##R# ggplot(df,aes(x=Seconds))+
##R# geom_path(aes(y=Speed1),colour="blue",linetype=1)+
##R# geom_path(aes(y=Speed2),colour="green",linetype=1)+ ##R# See that spline fun is "useless" here
##R# geom_path(aes(y=Speed),colour="red",linetype=1)+
##R# coord_cartesian(xlim = c(0, 2700), ylim=c(2, 5))
##R# dev.off()
# Generate some plots
Num=2001
minT=0; maxT=max(df$Seconds)
interT=minT+(maxT-minT)*(0:Num)/Num ##R# generate Num+1 numbers from minT to maxT (delta T * Frac)
colfunc=colorRampPalette(c("navy","white", "red3"),space="Lab")
cp=colfunc(500)
getCol<-function(colFrac) cp[1+round(499*colFrac)]
head(df)
60*7/1000
hrFrac=(hr(interT)-min(hr(interT)))/(max(hr(interT))-min(hr(interT))) ##R# Heart rate
upFrac=(up(interT)-min(up(interT)))/(max(up(interT))-min(up(interT))) ##R# Elevation
pmax=min(c(60*7/1000,max(pace(interT)))) # Else scales ruined by stopping and walking
max(pace(interT))
head(df)
hist(pace(interT),breaks=30)
qplot(df,data=Pace,geom="histogram")
library("ggplot2")
qplot(df,data=Pace,geom="histogram")
head(df)
qplot(Pace,data=df,geom="histogram")
qplot(Pace,data=df,geom="histogram",binwidth=0.2)
qplot(Pace,data=df,geom="histogram",binwidth=0.1)
qplot(Pace,data=df,geom="histogram",binwidth=0.05)
quantile(df$Pace)
quantile(df$Pace,probs=seq(0,1,0.1))
quantile distribution <- quantile(df$Pace,probs=seq(0,1,0.1))
plot(quantileDistribution)
quantileDistribution <- quantile(df$Pace,probs=seq(0,1,0.1))
plot(quantileDistribution)
plot(x=quantileDistribution)
plot(y=quantileDistribution)
quantileDistribution <- quantile(df$Pace,probs=seq(0,1,0.1))
qplot(quantileDistribution)
qplot(quantileDistribution,geom="point")
quantileDistribution <- quantile(df$Pace,probs=seq(0,1,0.1))
quantileDistribution
names(quantileDistribution)
probs <- names(quantileDistribution)
qplot(x=quantileDistribution,y=probs,geom="point")
probs
str(probs)
as.factor(probs)
as.ordered(probs)
probs <- names(quantileDistribution)
probs
as.factors(probs)
as.factor(probs)
probs <- names(quantileDistribution)
ordered(probs)
probs
as.integer(probs)
factor(probs)
factor(probs,ordered=F)
factor(probs,ordered=T)
factor(probs,levels=c("0%","10%","20%","30%",  "40%","50%","60%","70%","80%","90%","100%"))
probs <- factor(probs,levels=c("0%","10%","20%","30%",  "40%","50%","60%","70%","80%","90%","100%"))
qplot(x=quantileDistribution,y=probs,geom="point")
qplot(y=quantileDistribution,x=probs,geom="point")
quantileDistribution <- quantile(df$Pace,probs=seq(0,1,0.05))
probs <- names(quantileDistribution)
quantileDistribution
probs <- names(quantileDistribution)
probs <- names(quantileDistribution)
probs
paste(probs)
paste(probs,sep=",")
paste(probs,sep=",",collapse="")
paste(probs,sep=",",collapse=",")
paste(probs,collapse=",")
c(probs)
probs
levels <- paste(probs,collapse=""",""")
levels <- paste(probs,collapse="\",\"")
levels
levels <- paste(probs,collapse=",",sep="'")
levels
probs <- names(quantileDistribution)
probs
levels <- paste(probs,collapse=",",sep="'")
levels
levels <- paste(probs,collapse=",",sep="'\")
probs
as.character(probs)
levels <- paste(probs,collapse=",",sep="")
levels
probs
levels <- paste(probs,collapse="\",")
levels
levels <- paste(probs,collapse=\",")
levels
levels <- paste(probs,collapse="\',")
levels
probs
levels <- paste(probs,collapse="\',\'")
levels
probs
levels <- paste(probs,collapse="\',\"")
levels
levels <- paste(probs,collapse="\',\" ")
levels
probs
cat(probs)
str(cat(probs))
a <- cat(probs)
str(a)
class(a)
a <- cat(probs)
probs <- names(quantileDistribution)
probs
c(probs)
probs <- factor(probs,levels=probs)
probs
quantileDistribution <- quantile(df$Pace,probs=seq(0,1,0.2))
quantileDistribution
probs <- names(quantileDistribution)
probs
probs <- factor(probs,levels=probs)
probs
qplot(y=quantileDistribution,x=probs,geom="point")
probs <- names(quantileDistribution)
probs
probs <- factor(probs,levels=probs)
probs
qplot(y=quantileDistribution,x=probs,geom="point")
quantileDistribution <- quantile(df$Pace,probs=seq(0,1,0.05))
probs <- names(quantileDistribution)
probs <- factor(probs,levels=probs)
qplot(y=quantileDistribution,x=probs,geom="point")
qplot(y=quantileDistribution,x=probs,geom="line")
qplot(y=quantileDistribution,x=probs,geom="path")
qplot(y=quantileDistribution,x=probs,geom="points")
qplot(y=quantileDistribution,x=probs,geom="point")
qplot(y=quantileDistribution,x=probs,geom="polygon")
qplot(y=quantileDistribution,x=probs,geom="line")
qplot(y=quantileDistribution,x=probs,geom="path")
qplot(y=quantileDistribution,x=probs)
quantilePace <- quantile(df$Pace,probs=seq(0,1,0.05))
probs <- names(quantilePace)
probs <- factor(probs,levels=probs)
qplot(y=quantilePace,x=probs)
quantilePace <- quantile(df$Pace,probs=seq(0,1,0.01))
probs <- names(quantilePace)
probs <- factor(probs,levels=probs)
qplot(y=quantilePace,x=probs)
quantilePace <- quantile(df$Pace,probs=seq(0,1,0.03))
probs <- names(quantilePace)
probs <- factor(probs,levels=probs)
qplot(y=quantilePace,x=probs)
quantilePace <- quantile(df$Pace,probs=seq(0,1,0.02))
probs <- names(quantilePace)
probs <- factor(probs,levels=probs)
qplot(y=quantilePace,x=probs)
quantilePace <- quantile(df$Pace,probs=seq(0,1,0.01))
probs <- names(quantilePace)
probs <- factor(probs,levels=probs)
qplot(y=quantilePace,x=probs)
quantilePace <- quantile(df$Pace,probs=seq(0,1,0.02))
probs <- names(quantilePace)
probs <- factor(probs,levels=probs)
qplot(y=quantilePace,x=probs)
quantile(pace(interT),probs=0.95)
max(pace(interT))
quantilePace
head(df)
head(pace(interT))
max(pace(interT))
quantile(pace(interT),probs=1)
quantile(pace(interT),probs=seq(0,1,0.02))
quantilePace <- quantile(pace(interT),probs=seq(0,1,0.02))
quantilePace
probs <- names(quantilePace)
probs <- factor(probs,levels=probs)
qplot(y=quantilePace,x=probs)
quantilePace <- quantile(df$pace,probs=seq(0,1,0.02))
probs <- names(quantilePace)
probs <- factor(probs,levels=probs)
qplot(y=quantilePace,x=probs)
quantilePace <- quantile(df$Pace,probs=seq(0,1,0.02))
probs <- names(quantilePace)
probs <- factor(probs,levels=probs)
qplot(y=quantilePace,x=probs)
max(df$Pace)
pace(interT)
max(pace(interT))
max(df$Pace)
df$Pace
head(df)
df$Speed=speed(df$Seconds)
df$Pace=pace(df$Seconds)
max(pace(interT))
max(df$Pac)
max(df$Pace)
quantilePace <- quantile(pace(interT),probs=seq(0,1,0.02))
quantilePace
probs <- names(quantilePace)
probs <- factor(probs,levels=probs)
qplot(y=quantilePace,x=probs)
quantilePace <- quantile(pace(interT),probs=seq(0,1,0.01))
probs <- names(quantilePace)
probs <- factor(probs,levels=probs)
qplot(y=quantilePace,x=probs)
c <- rnorm(100)
quantilePace <- quantile(c,probs=seq(0,1,0.01))
quantilePace
probs <- names(quantilePace)
probs <- factor(probs,levels=probs)
qplot(y=quantilePace,x=probs)
c <- rnorm(10000)
quantilePace <- quantile(c,probs=seq(0,1,0.01))
probs <- names(quantilePace)
probs <- factor(probs,levels=probs)
qplot(y=quantilePace,x=probs)
c <- rnorm(10000,0,0.5)
quantilePace <- quantile(c,probs=seq(0,1,0.01))
probs <- names(quantilePace)
probs <- factor(probs,levels=probs)
qplot(y=quantilePace,x=probs)
c <- rnorm(10000,0,0.05)
quantilePace <- quantile(c,probs=seq(0,1,0.01))
probs <- names(quantilePace)
probs <- factor(probs,levels=probs)
qplot(y=quantilePace,x=probs)
# Calculate Color Scales
quantilePace <- quantile(pace(interT),probs=seq(0,1,0.01))
probs <- names(quantilePace)
probs <- factor(probs,levels=probs)
qplot(y=quantilePace,x=probs)
quantilePace <- quantile(pace(interT),probs=seq(0,1,0.005))
probs <- names(quantilePace)
probs <- factor(probs,levels=probs)
qplot(y=quantilePace,x=probs)
head(df)
hist(pace(interT),breaks=30)
qplot(Pace,data=df,geom="histogram",binwidth=0.05)
quantilePace <- quantile(pace(interT),probs=seq(0,1,0.005))
probs <- names(quantilePace)
probs <- factor(probs,levels=probs)
qplot(y=quantilePace,x=probs)
quantilePace <- quantile(pace(interT),probs=seq(0,1,0.5))
probs <- names(quantilePace)
probs <- factor(probs,levels=probs)
qplot(y=quantilePace,x=probs)
quantilePace <- quantile(pace(interT),probs=seq(0,1,0.05))
probs <- names(quantilePace)
probs <- factor(probs,levels=probs)
qplot(y=quantilePace,x=probs)
quantilePace <- quantile(pace(interT),probs=seq(0,1,0.01))
probs <- names(quantilePace)
probs <- factor(probs,levels=probs)
qplot(y=quantilePace,x=probs)
quantilePace
qplot(y=quantilePace,x=probs)
quantile(pace(interT),probs=0.95)
quantile(pace(interT),probs=0.98)
quantile(pace(interT),probs=0.99)
quantile(pace(interT),probs=0.999999)
quantile(pace(interT),probs=0.99)
quantile(pace(interT),probs=0.999)
quantile(pace(interT),probs=0.995)
quantile(pace(interT),probs=0.992)
quantile(pace(interT),probs=0.993)
quantile(pace(interT),probs=0.95)
60*7/1000
max(pace(interT))
pmax=min(c(60*7/1000,max(pace(interT)))) # Else scales ruined by stopping and walking
pmax
pFrac=(pace(interT)-min(pace(interT)))/(pmax-min(pace(interT)))
pFrac
min(pace(interT))
pmax
min(pace(interT))
(pmax-min(pace(interT))
)
pFrac=(pace(interT)-min(pace(interT)))/(pmax-min(pace(interT)))
plot(pFrac)
quantilePace <- quantile(pFrac,probs=seq(0,1,0.01))
probs <- names(quantilePace)
probs <- factor(probs,levels=probs)
qplot(y=quantilePace,x=probs)
quantile(pace(interT),probs=0.95)
quantilePace
quantilePace <- quantile(df$Speed,probs=seq(0,1,0.01))
probs <- names(quantilePace)
probs <- factor(probs,levels=probs)
qplot(y=quantilePace,x=probs)
ggplot(df,aes(x=Seconds))+
geom_path(aes(y=Speed1),colour="blue",linetype=1)+
geom_path(aes(y=Speed2),colour="green",linetype=1)+ ##R# See that spline fun is "useless" here
geom_path(aes(y=Speed),colour="red",linetype=1)+
coord_cartesian(xlim = c(0, 2700), ylim=c(2, 5))
qplot(Pace,data=df,geom="histogram",binwidth=0.05)
quantilePace <- quantile(pace(interT),probs=seq(0,1,0.01))
probs <- names(quantilePace)
probs <- factor(probs,levels=probs)
qplot(y=quantilePace,x=probs)
quantile(pace(interT),probs=0.95)
pFrac=(pace(interT)-min(pace(interT)))/(pmax-min(pace(interT)))
hist(pFrac)
str(pFrac)
summary(pFrac)
quantilePace <- quantile(pFrac,probs=seq(0,1,0.01))
probs <- names(quantilePace)
probs <- factor(probs,levels=probs)
qplot(y=quantilePace,x=probs)
hrLevels=min(hr(interT))+(1:length(cp))*(max(hr(interT))-min(hr(interT)))/length(cp) ##R# Heart rate
hrLevels
min(hr(interT))
max(hr(interT))
hrLevels=min(hr(interT))+(1:length(cp))*(max(hr(interT))-min(hr(interT)))/length(cp) ##R# Heart rate
upLevels=min(up(interT))+(1:length(cp))*(max(up(interT))-min(up(interT)))/length(cp) ##R# Elevation
max(ppace(interT))
pmax=min(c(7,max(ppace(interT)))) # Else scales ruined by stopping and walking
hrFrac
hrLevels=min(hr(interT))+(1:length(cp))*(max(hr(interT))-min(hr(interT)))/length(cp) ##R# Heart rate
upLevels=min(up(interT))+(1:length(cp))*(max(up(interT))-min(up(interT)))/length(cp) ##R# Elevation
##R# Computes the max pace, if it is greater that 7 min/km it overwrites it with #7
pmax=min(c(7,max(ppace(interT)))) # Else scales ruined by stopping and walking
pLevels=min(ppace(interT))+(1:length(cp))*(pmax-min(ppace(interT)))/length(cp) ##R# Pace
